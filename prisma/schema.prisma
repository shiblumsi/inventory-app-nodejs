// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum Role{
  admin
  staff
  customer
}

model OTP {
  id            Int       @id @default(autoincrement())
  userId        Int
  code          String
  expiresAt     DateTime
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
}

model User {
  id            Int       @id @default(autoincrement())
  name          String
  email         String    @unique
  passwordHash  String?
  role          Role    @default(customer)
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  addresses     Address[]
  carts         Cart[]    // Reverse relation to Cart
  payments      Payment[] // Reverse relation to Payment
  otps          OTP[]
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  stock         Int
  categoryId    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category? @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]
  cartItems     CartItem[] // Reverse relation to CartItem
}

model Category {
  id            Int       @id @default(autoincrement())
  name          String    @unique
  description   String?
  products      Product[]
}

model Cart {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  cartItems     CartItem[]
}

model CartItem {
  id            Int       @id @default(autoincrement())
  cartId        Int
  productId     Int
  quantity      Int
  createdAt     DateTime  @default(now())
  cart          Cart      @relation(fields: [cartId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
}

model Order {
  id            Int       @id @default(autoincrement())
  userId        Int
  addressId     Int
  paymentId     Int
  totalAmount   Float
  status        String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  address       Address   @relation(fields: [addressId], references: [id])
  payment       Payment   @relation(fields: [paymentId], references: [id])
  orderItems    OrderItem[]
}

model OrderItem {
  id            Int       @id @default(autoincrement())
  orderId       Int
  productId     Int
  quantity      Int
  price         Float
  createdAt     DateTime  @default(now())
  order         Order     @relation(fields: [orderId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int       @id @default(autoincrement())
  userId        Int
  amount        Float
  paymentMethod String
  status        String
  transactionId String    @unique
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  orders        Order[]
}

model Address {
  id            Int       @id @default(autoincrement())
  userId        Int
  street        String
  city          String
  state         String
  postalCode    String
  country       String
  createdAt     DateTime  @default(now())
  user          User      @relation(fields: [userId], references: [id])
  orders        Order[]         
}
